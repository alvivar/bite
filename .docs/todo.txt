
    Refactor so that the main thread only handles connections

    When reading handle the value as bytes, use utf8 to parse the instructions and the key

    Update the docs with the new commands
    Maybe unsubscriptions for each subscription?
    Auth by password

    Maybe you should be able to subscribe to all the content when you don't specify the key?
    Extract kv range into his own function

    Send multiple commands, batch-like (Multiple sets, to receive multiple results)

    tungstenite to support websockets?
    Handle casting, int, float, bool?

    Document questions for the mentor
    @mentor Does dropping the lock helps somehow?

    Trim '.' at the end to avoid weird formats?

    Update key op?
    Command to get all the keys, gk, jk?

    Gracefully shutdown on Docker, Ctrl + C

    Use a decent log system instead of println?
    Use Error as results instead of unwrap
    DB file name by environment
    IP and port by environment

    Heroku script

    Thread waiting for q! in the input to quit.
    Improve serialization so it can be written in blocks like a good BTreeMap on file?

    Connection handles needs to be a module?

    A way to handle lists, maybe user.likes.1 or something?
    Push # value should insert into a list, transform normal values
    Pop # should return and delete a value


    2021.12.12
    x Real license
    x Delete modifies the DB only if modified.

    2021.10.04
    x Lost connections cleans the connections in readers, writers and subscriptions

    2021.07.31
    x Optimize subscriptions calling by grouping connections by instructions when calling the map?
    x Save into the DB.json
    x Sometimes it writes the last message one last time?

    2021.07.27
    x Connect data with the subscriptions things
    x Writing data on the socket should be a queue
    x Call subscriptions
    x Consider one channel for messages, other to receive subscriptions
    x Could smol make the application faster?
    x I'm using the Cargo.toml dependencies correctly?

    2021.07.25
    x Support the old subscriptions
    x Instead of string, the command on the reading should be an enum
    x It should be possible to have multiple subscriptions
    x You should be able to send multiple subscriptions messages without blocking the thread (right now subscriptions block)
    x Delete op

    2021.05.10
    x Revise Key length
    x Revise NOP responses
    x Heartbeat fixed by using a simple protocol that clients need to deal with
    x Why the subs cleaner and the heartbeat cleaner can't be solved with just one thing?

    2021.04.20
    x Delete instruction "d"

    2021.04.18
    x ! instruction will send a subscription without recording in the db
    x + Append instruction
    x +1 doesn't save on the dictionary
    x Use time and IP on the server log

    2021.04.05
    x Update the documentation
    x Replaced the worker threadpool, it doesn't make sense, eventually I'll migrate to async, probably smol

    2021.04.01
    x Inc instruction
    x Is map::Result the correct name/concept? It's a message to clients connections basically
    x Thread that watch for subscription workers with orphan connections
    x Do we need to call Subs::Clean on reads (JTrim, Json, Get)?
    x Dropping subscriptions when send fails can be grouped into a list
    x Dropping queues when send fails
    x stream_write bug when the first write works and the second fails unwrapping, usually when there are subscriptions a la user, then user.name, then user.name.meaning
    x Migrate to Crossbeam?
    x Revision 2021.04.01
    x #b Return instruction simplified

    2021.02.28
    x The test client handles subscriptions also.
    x The subs client test sucks. At least read the input line.
    x s? sets key if empty
    x Subscription should be able to ignore non related subscription, instead of entry api
    x Rethink the #j #js #g api because it makes sense to only receive the last message setted

    2021.02.24
    x #jx Needs to be able to receive only the last modification, not the complete json

    2021.02.18
    x Subscriptions
    x Handle subscriptions error when sending to already disconnected clients.
    x Stop the subscription thread on disconnection.
    x #js
    x #g
    x #j needs to add the client sender into a list, in a dictionary with his key
    x s needs to tell the Subscriptions about a key being modified
    x Subscriptions checks for keys being modified and sends the value to the #j client sender

    2021.02.07
    x Readme update
    x SET without key, creates an empty key
    x DB should saved based on a dirty flag, every certain second.
    . Append '.' to the key to make sure the json tree can be constructed
    x Accept that this may not be the time to implement lists
    x Better naming

    2021.02.06
    x Probably, values needs to be sanitized, codified when converting to json?
    x Get should read values using json instructions
    x Set should transform json instructions into a value
    x Parse message for nested jsons into instructions
    x Parsing JSON Parent key with data panics!
    x SET user.name Name -> { "user": { name: "Name" } }
    x SET user.name.len 4 -> { "user": { "name": { "len": 4 } } }
    x GET user.name -> Name <- { "user": { name: "Name" } }
    x GET user.name.len -> 4 <- { "user": { "name": { "len": 4 } } }
    x Macros to deal with infinite json value propagation?

    2021.02.02
    x Handle dead threads

    2021.01.30
    x New threads should be created, if all of them are busy

    2021.01.30
    x Exit correctly by joining handles
    x Saving into the file should have a throtle
    x v3 Implemented [!]
    x How to create a WorkerPool
    x How to create modules or something to divide logic in files

    2021.01.25
    x Save to file!
    x WorkerPool prototype

    2021.01.24
    x Propagate ip address
    x Handle client disconnect because everything explodes
    x Threads should be able to handle a pool of connections
    x NOP propagates the wrong instruction as key

    2021.01.23
    x Thread pool handles connections and parsing
    x Main thread process IO
    x Multithreaded

    2021.01.22
    x Happiness! PROD ready I guess!
    x Needs to send back the message to the client [!]

    2021.01.20
    x Server writes over the BTreeMap withing a thread using Arc::new(RwLock::new(key_values)) as pointer, need more info
    x Client clean up, but something is missing
    x GET fails if empty, it should probably set a default

    2021.01.18
    x GEt to BTreeMap
    x SET to BTreeMap
    Prototype, single thread, like a chat, simple parsing
