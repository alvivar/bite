
    Optimize subscriptions calling by grouping connections by instructions when calling the map
    Thread that watch for workers with orphan connections?
    Ping instruction to measure the response time
    Is map::Result the correct name/concept? It's a message to clients connections basically

    Update the documentation

    Handle casting, int, float, bool
    Auth by password

    Send multiple commands, batch-like (Multiple sets, to receive multiple results)

    Could smol make the application faster?
    Document questions for the mentor

    Delete op
    Update key op

    Command to get all the keys, gk, jk
    Trim '.' at the end to avoid weird formats?

    Extract kv range into his own function
    Gracefully shutdown on Docker, Ctrl + C
    I'm using the Cargo.toml dependencies correctly?

    Use a decent log system instead of println?
    Use time and IP on the server log
    DB file name by environment
    IP and port by environment

    Use Error as results instead of unwrap

    Heroku script

    Thread waiting for q! in the input to quit.
    Improve serialization so it can be written in blocks like a good BTreeMap on file?

    Connection handles needs to be a module?

    A way to handle lists, maybe user.likes.1 or something
    Push # value should insert into a list, transform normal values
    Pop # should return and delete a value


    2021.04.01
    x Do we need to call Subs::Clean on reads (JTrim, Json, Get)?
    x Dropping subscriptions when send fails can be grouped into a list
    x Dropping queues when send fails
    x stream_write bug when the first write works and the second fails unwrapping, usually when there are subscriptions a la user, then user.name, then user.name.meaning
    x Migrate to Crossbeam?
    x Revision 2021.04.01
    x #b Return instruction simplified

    2021.02.28
    x The test client handles subscriptions also.
    x The subs client test sucks. At least read the input line.
    x s? sets key if empty
    x Subscription should be able to ignore non related subscription, instead of entry api
    x Rethink the #j #js #g api because it makes sense to only receive the last message setted

    2021.02.24
    x #jx Needs to be able to receive only the last modification, not the complete json

    2021.02.18
    x Subscriptions
    x Handle subscriptions error when sending to already disconnected clients.
    x Stop the subscription thread on disconnection.
    x #js
    x #g
    x #j needs to add the client sender into a list, in a dictionary with his key
    x s needs to tell the Subscriptions about a key being modified
    x Subscriptions checks for keys being modified and sends the value to the #j client sender

    2021.02.07
    x Readme update
    x SET without key, creates an empty key
    x DB should saved based on a dirty flag, every certain second.
    . Append '.' to the key to make sure the json tree can be constructed
    x Accept that this may not be the time to implement lists
    x Better naming

    2021.02.06
    x Probably, values needs to be sanitized, codified when converting to json?
    x Get should read values using json instructions
    x Set should transform json instructions into a value
    x Parse message for nested jsons into instructions
    x Parsing JSON Parent key with data panics!
    x SET user.name Name -> { "user": { name: "Name" } }
    x SET user.name.len 4 -> { "user": { "name": { "len": 4 } } }
    x GET user.name -> Name <- { "user": { name: "Name" } }
    x GET user.name.len -> 4 <- { "user": { "name": { "len": 4 } } }
    x Macros to deal with infinite json value propagation?

    2021.02.02
    x Handle dead threads

    2021.01.30
    x New threads should be created, if all of them are busy

    2021.01.30
    x Exit correctly by joining handles
    x Saving into the file should have a throtle
    x v3 Implemented [!]
    x How to create a WorkerPool
    x How to create modules or something to divide logic in files

    2021.01.25
    x Save to file!
    x WorkerPool prototype

    2021.01.24
    x Propagate ip address
    x Handle client disconnect because everything explodes
    x Threads should be able to handle a pool of connections
    x NOP propagates the wrong instruction as key

    2021.01.23
    x Thread pool handles connections and parsing
    x Main thread process IO
    x Multithreaded

    2021.01.22
    x Happiness! PROD ready I guess!
    x Needs to send back the message to the client [!]

    2021.01.20
    x Server writes over the BTreeMap withing a thread using Arc::new(RwLock::new(key_values)) as pointer, need more info
    x Client clean up, but something is missing
    x GET fails if empty, it should probably set a default

    2021.01.18
    x GEt to BTreeMap
    x SET to BTreeMap
    Prototype, single thread, like a chat, simple parsing
